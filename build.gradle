group 'com.github.carlosmenezes'
version '0.1.2'
rootProject.description 'A library for kafka topologies testing.'

buildscript {
    ext {
        kafkaVersion = "0.11.0.0"
        rocksDBVersion = "5.0.1"
        isReleaseVersion = !version.endsWith("SNAPSHOT")
    }

    repositories {
        mavenCentral()
    }
}

apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'maven-publish'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {

    compile "org.apache.kafka:kafka-clients:$kafkaVersion"
    compile "org.apache.kafka:kafka-streams:$kafkaVersion"
    compile "org.apache.kafka:kafka-clients:$kafkaVersion:test"
    compile "org.apache.kafka:kafka-streams:$kafkaVersion:test"

    testCompile 'junit:junit:4.12'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom, rootProject)
            from components.java

            artifact sourcesJar
            artifact javadocJar

            // sign the pom
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
                pomFile.delete()
            }

            // sign the artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

def customizePom(pom, gradleProject) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description gradleProject.description
            name 'Mockafka'
            url 'https://github.com/carlosmenezes/mockafka'
            organization {
                name 'FireBall'
                url 'https://github.com/carlosmenezes'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/carlosmenezes/mockafka/issues'
            }
            licenses {
                license {
                    name 'The MIT License'
                    url 'https://github.com/carlosmenezes/mockafka/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/carlosmenezes/mockafka/'
                connection 'scm:git:git://github.com/carlosmenezes/mockafka.git'
                developerConnection 'scm:git:ssh://git@github.com/carlosmenezes/mockafka.git'
            }
            developers {
                developer {
                    id 'carlos'
                    name 'Carlos Menezes'
                    email 'pachecomenezes@gmail.com'
                }
                developer {
                    id 'diego'
                    name 'Diego Bonfim'
                    email 'diego.fbonfim@gmail.com'
                }
            }
        }
    }
}

model {
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn(project.tasks.signArchives)
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn(project.tasks.signArchives)
    }
}

task install(dependsOn: publishToMavenLocal) {
    group = 'Publishing'
    description = 'Installs artifacts to local Maven repository'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}
